{"ast":null,"code":"/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n  if (typeof value === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n  assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value, name) {\n  return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value, name) {\n  return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (typeof length === \"number\" && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  if (length === true && value.length % 2 !== 0) {\n    return false;\n  }\n  return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value) {\n  return isHexString(value, true) || value instanceof Uint8Array;\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data) {\n  const bytes = getBytes(data);\n  let result = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n  }\n  return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas) {\n  return \"0x\" + datas.map(d => hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data) {\n  if (isHexString(data, true)) {\n    return (data.length - 2) / 2;\n  }\n  return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data, start, end) {\n  const bytes = getBytes(data);\n  if (end != null && end > bytes.length) {\n    assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n      buffer: bytes,\n      length: bytes.length,\n      offset: end\n    });\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data) {\n  let bytes = hexlify(data).substring(2);\n  while (bytes.startsWith(\"00\")) {\n    bytes = bytes.substring(2);\n  }\n  return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n  const bytes = getBytes(data);\n  assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n    buffer: new Uint8Array(bytes),\n    length: length,\n    offset: length + 1\n  });\n  const result = new Uint8Array(length);\n  result.fill(0);\n  if (left) {\n    result.set(bytes, length - bytes.length);\n  } else {\n    result.set(bytes, 0);\n  }\n  return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data, length) {\n  return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data, length) {\n  return zeroPad(data, length, false);\n}","map":{"version":3,"names":["assert","assertArgument","_getBytes","value","name","copy","Uint8Array","match","result","length","offset","i","parseInt","substring","getBytes","getBytesCopy","isHexString","isBytesLike","HexCharacters","hexlify","data","bytes","v","concat","datas","map","d","join","dataLength","dataSlice","start","end","buffer","slice","stripZerosLeft","startsWith","zeroPad","left","fill","set","zeroPadValue","zeroPadBytes"],"sources":["/Users/donny/Desktop/FlappyNounsClient/node_modules/ethers/lib.esm/utils/data.js"],"sourcesContent":["/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof (value) === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && (value.length % 2) !== 0) {\n        return false;\n    }\n    return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value) {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas) {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) {\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    }\n    else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n}\n//# sourceMappingURL=data.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}