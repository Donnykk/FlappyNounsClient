{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChainstackProvider = void 0;\n/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nfunction getApiKey(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"39f1d67cedf8b7831010a665328c9197\";\n    case \"arbitrum\":\n      return \"0550c209db33c3abf4cc927e1e18cea1\";\n    case \"bnb\":\n      return \"98b5a77e531614387366f6fc5da097f8\";\n    case \"matic\":\n      return \"cd9d4d70377471aa7c142ec4a4205249\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethereum-mainnet.core.chainstack.com\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.core.chainstack.com\";\n    case \"bnb\":\n      return \"bsc-mainnet.core.chainstack.com\";\n    case \"matic\":\n      return \"polygon-mainnet.core.chainstack.com\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nclass ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  The API key for the Chainstack connection.\n   */\n  apiKey;\n  /**\n   *  Creates a new **ChainstackProvider**.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = ChainstackProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    (0, index_js_1.defineProperties)(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new ChainstackProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.apiKey === getApiKey(this._network.name);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%apiKey%% and %%projectSecret%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === getApiKey(network.name)) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"ChainstackProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.ChainstackProvider = ChainstackProvider;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;AAaA;AAIA;AACA;AACA;AAOA,SAASA,SAAS,CAACC,IAAY;EAC3B,QAAQA,IAAI;IACR,KAAK,SAAS;MAAE,OAAO,kCAAkC;IACzD,KAAK,UAAU;MAAE,OAAO,kCAAkC;IAC1D,KAAK,KAAK;MAAE,OAAO,kCAAkC;IACrD,KAAK,OAAO;MAAE,OAAO,kCAAkC;EAAC;EAG5D,6BAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAEA,IAAI,CAAC;AACjE;AAEA,SAASC,OAAO,CAACD,IAAY;EACzB,QAAOA,IAAI;IACP,KAAK,SAAS;MACV,OAAO,sCAAsC;IACjD,KAAK,UAAU;MACX,OAAO,sCAAsC;IACjD,KAAK,KAAK;MACN,OAAO,iCAAiC;IAC5C,KAAK,OAAO;MACR,OAAO,qCAAqC;EAAC;EAGrD,6BAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAEA,IAAI,CAAC;AACjE;AAEA;;;;;;;;;AASA,MAAaE,kBAAmB,SAAQC,qCAAe;EACnD;;;EAGSC,MAAM;EAEf;;;EAGAC,YAAYC,QAAqB,EAAEF,MAAsB;IACrD,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAMC,OAAO,GAAGC,oBAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;IAEtC,IAAIF,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGL,SAAS,CAACQ,OAAO,CAACP,IAAI,CAAC;;IAEtD,MAAMU,OAAO,GAAGR,kBAAkB,CAACS,UAAU,CAACJ,OAAO,EAAEH,MAAM,CAAC;IAC9D,KAAK,CAACM,OAAO,EAAEH,OAAO,EAAE;MAAEK,aAAa,EAAEL;IAAO,CAAE,CAAC;IAEnD,+BAAgB,EAAqB,IAAI,EAAE;MAAEH;IAAM,CAAE,CAAC;EAC1D;EAEAS,YAAY,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIZ,kBAAkB,CAACY,OAAO,EAAE,IAAI,CAACV,MAAM,CAAC;KACtD,CAAC,OAAOW,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEAE,mBAAmB;IACf,OAAQ,IAAI,CAACZ,MAAM,KAAKL,SAAS,CAAC,IAAI,CAACO,QAAQ,CAACN,IAAI,CAAC;EACzD;EAEA;;;;EAIA,OAAOW,UAAU,CAACJ,OAAgB,EAAEH,MAAsB;IACtD,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGL,SAAS,CAACQ,OAAO,CAACP,IAAI,CAAC;;IAEtD,MAAMU,OAAO,GAAG,IAAIO,uBAAY,CAAC,YAAahB,OAAO,CAACM,OAAO,CAACP,IAAI,CAAE,IAAKI,MAAO,EAAE,CAAC;IACnFM,OAAO,CAACQ,SAAS,GAAG,IAAI;IAExB,IAAId,MAAM,KAAKL,SAAS,CAACQ,OAAO,CAACP,IAAI,CAAC,EAAE;MACpCU,OAAO,CAACS,SAAS,GAAG,OAAOT,OAAO,EAAEU,QAAQ,EAAEC,OAAO,KAAI;QACrD,sCAAmB,EAAC,oBAAoB,CAAC;QACzC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOX,OAAO;EAClB;;AAlDJY","names":["getApiKey","name","getHost","ChainstackProvider","provider_jsonrpc_js_1","apiKey","constructor","_network","network","network_js_1","from","request","getRequest","staticNetwork","_getProvider","chainId","error","isCommunityResource","index_js_1","allowGzip","retryFunc","response","attempt","exports"],"sources":["/Users/donny/Desktop/FlappyNounsClient/node_modules/ethers/src.ts/providers/provider-chainstack.ts"],"sourcesContent":["/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nfunction getApiKey(name: string): string {\n    switch (name) {\n        case \"mainnet\": return \"39f1d67cedf8b7831010a665328c9197\";\n        case \"arbitrum\": return \"0550c209db33c3abf4cc927e1e18cea1\"\n        case \"bnb\": return \"98b5a77e531614387366f6fc5da097f8\";\n        case \"matic\": return \"cd9d4d70377471aa7c142ec4a4205249\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethereum-mainnet.core.chainstack.com\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.core.chainstack.com\";\n        case \"bnb\":\n            return \"bsc-mainnet.core.chainstack.com\";\n        case \"matic\":\n            return \"polygon-mainnet.core.chainstack.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API key for the Chainstack connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Creates a new **ChainstackProvider**.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = ChainstackProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<ChainstackProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new ChainstackProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === getApiKey(this._network.name));\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%apiKey%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === getApiKey(network.name)) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"ChainstackProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}